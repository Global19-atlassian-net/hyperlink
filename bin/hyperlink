#!/usr/bin/env node

const optimist = require('optimist');
const commandLineOptions = optimist
        .usage('Check your hyperlinks integrities.\n$0 [options] <htmlFile(s) | url(s)>')
        .options('h', {
            alias: 'help',
            describe: 'Show this help',
            type: 'boolean',
            default: false
        })
        .options('root', {
            describe: 'Path to your web root (will be deduced from your input files if not specified)',
            type: 'string',
            demand: false
        })
        .options('canonicalroot', {
            describe: 'URI root where the project being built will be deployed. Canonical URLs in local sources will be resolved to local URLs',
            type: 'string',
            demand: false
        })
        .options('verbose', {
            alias: 'v',
            describe: 'Log all added assets and relations. VERY verbose.',
            type: 'boolean'
        })
        .options('recursive', {
            alias: 'r',
            describe: 'Crawl all HTML-pages linked with relative and root relative links. This stays inside your domain.',
            type: 'boolean'
        })
        .options('source-maps', {
            describe: 'Verify the correctness of links to source map files and sources.',
            type: 'boolean',
            default: false
        })
        .options('exclude', {
            describe: 'Url pattern to exclude from the build. Supports * wildcards. You can create multiple of these: --exclude *.php --exclude http://example.com/*.gif',
            type: 'string',
            demand: false
        })
        .options('concurrency', {
            alias: 'c',
            describe: 'The maximum number of assets that can be loading at once',
            default: 25,
            type: 'integer'
        })
        .options('debug', {
            describe: 'Print debugging information during the run',
            type: 'boolean'
        })
        .wrap(72)
        .argv;

if (commandLineOptions.h) {
    optimist.showHelp();
    process.exit(1);
}

const urlTools = require('urltools');
const canonicalRoot = commandLineOptions.canonicalroot && urlTools.ensureTrailingSlash(commandLineOptions.canonicalroot);
const excludePatterns = commandLineOptions.exclude && [].concat(commandLineOptions.exclude);
const followSourceMaps = commandLineOptions['source-maps'];
let rootUrl = commandLineOptions.root && urlTools.urlOrFsPathToUrl(commandLineOptions.root, true);
let inputUrls;

if (commandLineOptions._.length > 0) {
    inputUrls = commandLineOptions._.map(function (urlOrFsPath) {
        return urlTools.urlOrFsPathToUrl(String(urlOrFsPath), false);
    });
    if (!rootUrl) {
        rootUrl = urlTools.findCommonUrlPrefix(inputUrls);
        if (rootUrl) {
            console.error('Guessing --root from input files: ' + rootUrl);
        }
    }
} else if (rootUrl && /^file:/.test(rootUrl)) {
    inputUrls = [rootUrl + '**/*.html'];
    console.error('No input files specified, defaulting to ' + inputUrls[0]);
} else {
    console.error('No input files and no --root specified (or it isn\'t file:), cannot proceed.\n');
    optimist.showHelp();
    process.exit(1);
}

const TapRender = require('tap-render');
const hyperlink = require('../lib/index');

const t = new TapRender();
t.pipe(process.stdout);

(async () => {
    try {
        await hyperlink({
            root: rootUrl,
            canonicalRoot: canonicalRoot,
            inputUrls: inputUrls,
            followSourceMaps: followSourceMaps,
            excludePatterns: excludePatterns,
            recursive: commandLineOptions.recursive,
            verbose: commandLineOptions.verbose,
            concurrency: commandLineOptions.concurrency,
            memdebug: commandLineOptions.debug
        }, t);
    } catch (err) {
        console.log(err.stack);
        process.exit(1);
    }
    const results = t.close();

    process.exit(results.fail ? 1 : 0);
})();
